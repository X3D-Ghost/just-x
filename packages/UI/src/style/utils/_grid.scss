@mixin grid_util($cols: $grid-columns, $rows: $grid-rows) {
  .grid {
	//display: grid;
	//grid-column-gap: var(--col-gap, $grid-col-gap);
	//grid-row-gap: var(--row-gap, $grid-row-gap);
	//grid-template-columns: repeat(var(--columns, #{$grid-columns}), 1fr);
	//grid-template-rows: repeat(var(--rows, 1), 1fr);
    &_cols {
      @for $i from 1 through $cols {
        &_#{$i} {
          grid-template-columns: repeat($i, minmax(0, 1fr));
        }
      }
    }
	&_rows {
	  @for $i from 1 through $rows {
		&_#{$i} {
		  grid-template-rows: repeat($i, minmax(0, 1fr));
		}
	  }
	}
  }
}
$cols: $grid-columns;
$rows: $grid-rows;
//@include grid_util();

@mixin create-grid($cols: $grid-columns, $rows: $grid-rows) {
  @each $name, $width in $breakpoints {
    //@media screen and (min-width: $width) {
    @include media-up($name) {
      $prefix: get-media-prefix($name);
      .#{$prefix}grid__cols{
        //@include grid_util()
		@include create-grid-dimensions($cols, 'columns');
      }
	  .#{$prefix}grid_rows {
		@include create-grid-dimensions($rows, 'rows');
	  }
      @for $i from 1 through $cols {
        $classname: #{$prefix}grid_cols;
        //@include create-class($classname, grid-template-columns, repeat($i, minmax(0, 1fr)));
        .#{$classname} {
		  &_#{$i} {
			@include create-grid-cols($i);
		  }
        }
		.#{$prefix}grid_flow {
		  &_col {
			grid-auto-flow: column;
			&-dense {
			  grid-auto-flow: column dense;
			}
		  }
		  &_row {
			grid-auto-flow: row;
			&-dense {
			  grid-auto-flow: row dense;
			}
		  }
		}
        .#{$prefix}grid__col {
          &_#{$i} {
            @include create-grid-column($i);
          }
          &_start_#{$i} {
            grid-column-start: $i;
          }
          &_end_#{$i} {
            grid-column-end: $i;
          }
        }
        .#{$prefix}grid__row {
		  &_#{$i} {
			@include create-grid-row($i);
		  }
		  &_start_#{$i} {
			grid-row-start: $i;
		  }
		  &_end_#{$i} {
			grid-row-end: $i;
		  }
        }
      }
    }
  }
}

@mixin create-grid-cols($cols: $grid-columns) {
  grid-template-columns: repeat(#{$cols}, 1fr);
  &:not(.grid) {
    display: grid;
  }
}

@mixin create-grid-column($col-width) {
  grid-column: auto / span $col-width;
}

@mixin create-grid-row($col-width) {
  grid-row: span $col-width;
}

@mixin create-grid-dimensions($count, $prop: columns) {
  @for $i from 1 through $count {
	&_#{$i} {
	  grid-template-#{$prop}: repeat($i, minmax(0, 1fr));
	}
  }
}

.grid {
  display: grid;
  grid: {
	column-gap: var(--col-gap, $grid-col-gap);
	row-gap: var(--row-gap, $grid-row-gap);
	template: {
	  columns: repeat(var(--columns, #{$grid-columns}), 1fr);
	  rows: repeat(var(--rows, 1), 1fr);
	}
  };
}

@include create-grid();
